@use '../../styles/variables' as *;

.item {
  position: relative;
  border: none !important;
  box-shadow: none !important;
  outline: none !important;

  background-color: var(--level-0-bg);

  &[data-level="1"] {
    background-color: var(--level-1-bg);
  }

  &[data-level="2"] {
    background-color: var(--level-2-bg);
  }

  // level 3 and beyond
  &[data-level]:not([data-level="0"]):not([data-level="1"]):not([data-level="2"]) {
    background-color: var(--level-3-bg);
  }

  &::before,
  &::after {
    display: none !important;
  }

  &.treeHighlight:not(.active) {
    background-color: var(--tree-highlight-bg) !important;
    transition: background-color 0.3s ease-out;

    .item:not(.active) {
      background-color: var(--tree-highlight-bg) !important;
      transition: background-color 0.3s ease-out;
    }
  }

  &.active {
    background-color: transparent !important;
    transition: none !important;

    > .itemContent {
      background-color: var(--active-bg) !important;
      color: var(--active-text);
      transition: none !important;

      .itemButton {
        color: inherit;
        transition: none !important;
      }

      .expandIcon {
        color: var(--icon-active-color);
        transition: none !important;
      }
    }
  }

  &:not(.active):not(.treeHighlight):hover {
    > .itemContent {
      background-color: var(--hover-bg) !important;
      border-radius: 0;

      .itemButton {
        color: var(--hover-text);
      }

      .expandIcon {
        color: var(--icon-hover-color);
      }
    }
  }
}

.itemContent {
  display: flex;
  align-items: center;
  position: relative;
  transition: all $transition-duration $transition-easing;
  padding-left: calc(var(--indent-level, 0) * $indent-step + 12px);
  border-radius: 0;
  margin: 0;
  border: none;
  background-color: transparent;
}

.itemButton {
  display: flex;
  align-items: center;
  width: 100%;
  background: none;
  border: none !important;
  padding: 8px 12px 8px 0;
  margin: 0;
  text-align: left;
  cursor: pointer;
  color: var(--text-color);
  font-size: 13px;
  font-family: inherit;
  line-height: 1.4;
  min-height: 32px;
  transition: all $transition-duration $transition-easing;
  border-radius: 0;

  // Focus styling
  &:focus-visible {
    outline: none;
    background-color: var(--focus-bg);

    // Dark mode border focus
    :root[data-theme="dark"] & {
      border: 1px solid var(--focus-border) !important;
    }

    @media (prefers-color-scheme: dark) {
      :root:not([data-theme="light"]) & {
        border: 1px solid var(--focus-border) !important;
      }
    }
  }

  // Active button styling
  .item.active > .itemContent & {
    color: var(--active-text);
    font-weight: 500;

    &:focus-visible {
      outline: none;
      background-color: rgba(255, 255, 255, 0.1);

      :root[data-theme="dark"] & {
        border: 1px solid var(--focus-border) !important;
      }

      @media (prefers-color-scheme: dark) {
        :root:not([data-theme="light"]) & {
          border: 1px solid var(--focus-border) !important;
        }
      }
    }
  }
}

.expandIcon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 18px;
  height: 18px;
  margin-right: 6px;
  flex-shrink: 0;
  color: var(--icon-color);
  transition: color $transition-duration $transition-easing;

  .item.active > .itemContent & {
    color: var(--icon-active-color);
  }

  .item:not(.active):hover > .itemContent & {
    color: var(--icon-hover-color);
  }
}

.itemTitle {
  flex: 1;
  line-height: 1.4;
  transition: color $transition-duration $transition-easing;
  word-break: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  max-width: calc(100% - 28px);

  .item:not(.hasChildren) & {
    margin-left: 28px;
    max-width: calc(100% - 56px);
  }
}


.childrenList {
  list-style: none;
  padding: 0;
  margin: 0;
  background-color: transparent;
  border: none;
  overflow: hidden;

  max-height: 2000px;
  opacity: 1;
  transform: translateY(0);
  transition:
          max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1),
          opacity 0.25s ease-out,
          transform 0.25s ease-out;

  .item:not(.expanded) & {
    max-height: 0;
    opacity: 0;
    transform: translateY(-8px);
  }

  .item.searching & {
    transition:
            max-height 0.2s cubic-bezier(0.4, 0, 0.2, 1),
            opacity 0.15s ease-out,
            transform 0.15s ease-out;
  }
}

// Anchors styling
.anchorsList {
  list-style: none;
  padding: 4px 0 8px 0;
  margin: 0;
  background-color: transparent;
  overflow: hidden;
  border: none !important;
  animation: fadeIn 0.15s ease-out;
}

.anchorItem {
  position: relative;
  border: none !important;

  // Anchors inherit the same level background as their parent item
  &[data-level="0"] {
    background-color: var(--level-0-bg);
  }

  &[data-level="1"] {
    background-color: var(--level-1-bg);
  }

  &[data-level="2"] {
    background-color: var(--level-2-bg);
  }

  &[data-level]:not([data-level="0"]):not([data-level="1"]):not([data-level="2"]) {
    background-color: var(--level-3-bg);
  }

  &:hover {
    .anchorButton {
      background-color: var(--hover-bg);
      color: var(--hover-text);

      .anchorTitle::before {
        background-color: $primary-color;
      }
    }
  }
}

.anchorButton {
  display: flex;
  align-items: center;
  width: 100%;
  padding: 6px 12px;
  padding-left: calc(var(--indent-level, 0) * $indent-step + 32px);
  background: none;
  border: none !important;
  text-align: left;
  cursor: pointer;
  color: var(--text-color-light);
  font-size: 12px;
  font-family: inherit;
  min-height: 28px;
  transition: all $transition-duration $transition-easing;
  border-radius: 0;
  margin: 0;

  // Focus styling
  &:focus-visible {
    outline: none;
    background-color: var(--focus-bg);

    :root[data-theme="dark"] & {
      border: 1px solid var(--focus-border) !important;
    }

    @media (prefers-color-scheme: dark) {
      :root:not([data-theme="light"]) & {
        border: 1px solid var(--focus-border) !important;
      }
    }
  }
}

.anchorTitle {
  line-height: 1.4;
  position: relative;
  padding-left: 16px;
  word-break: break-word;
  overflow-wrap: break-word;
  hyphens: auto;

  &::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: var(--text-color-lighter);
    transition: background-color $transition-duration $transition-easing;
    flex-shrink: 0;
  }
}

// animations
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.item {
  &.hasChildren {
    > .itemContent {
      .itemButton {
        cursor: pointer;
      }
    }
  }

  &.searching {
    * {
      transition-duration: 0.1s;
    }
  }
}

// High contrast mode
@media (prefers-contrast: more) {
  .item.active > .itemContent {
    background-color: #000;
    color: #fff;
    border: none !important;
  }

  .item:not(.active):hover > .itemContent {
    background-color: #fff;
    color: #000;
    border: none !important;
  }

  .expandIcon {
    font-weight: bold;
  }
}

@media (prefers-reduced-motion: reduce) {
  .item,
  .itemContent,
  .itemButton,
  .expandIcon,
  .itemTitle,
  .childrenList,
  .anchorsList,
  .anchorButton,
  .anchorTitle::before {
    transition: none !important;
    animation: none !important;
  }
}